<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 配置扫描器 -->
	<context:component-scan base-package="cn.edu.xit.dao.impl,cn.edu.xit.service.impl"></context:component-scan>
	
	
	
	
	
	
	
	
	<!-- 配置数据库相关-事务 --><!-- org.springframework.jdbc.datasource.DriverManagerDataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/spring"></property>
		<property name="username" value="root"></property>
		<property name="password" value="123"></property>
	
	</bean>
	
	
	<!-- 配置书屋管理器txManager -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	
	<!-- 增加对事务的支持 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!--  -->
	
	
	
	
	
	
	
	
	
	
	
	<!-- 该文件中产生的所有对象，被spring放入一个  称之位spring ioc容器的地方 -->
	<!-- id:唯一标识符    class:指定类型 -->
	
	<bean id="student" class="cn.edu.xit.entity.Student">
		<!-- property:该class所代表的类的属性
			name：属性名
			value：属性值
		 -->
		<property name="stuNo" value="2"></property>		
		<property name="stuName" value="lisi"></property>
		<property name="stuAge" value="20"></property>
	</bean>
	
<!--	<bean id="javaCourse" class="cn.edu.xt.newinstance.JavaCourse"></bean>
		<bean id="htmlCourse" class="cn.edu.xt.newinstance.HtmlCourse"></bean>
 -->
	
	<bean id="teacher" class="cn.edu.xit.entity.Teacher">
		<property name="name" value="hanhan"></property>
		<!-- 依赖注入的三种方法 -->
		<!--   一、通过set赋值
		<property name="name" value="zhangsan"></property>
		<property name="age" value="18"></property>	
		-->
		
		<!-- 通过构造器赋值 -->
			<!-- 二、 1.顺序出错，可用index索引位置指定
				<constructor-arg value="lisi" index="0"></constructor-arg>
				<constructor-arg value="24"  index="1"></constructor-arg>
			-->
			<!--  2.顺序出错，可用name指定
				<constructor-arg value="lisi" name="name"></constructor-arg>
				<constructor-arg value="24"  name="age"></constructor-arg>
			-->	
			<!-- 3.顺序出错，可用type指定(前提是类型不一样)
				<constructor-arg value="lisi" type="String"></constructor-arg>
				<constructor-arg value="24"  type="int"></constructor-arg>
			-->
	</bean>
	
	<!--autowire="byName" 自动装配（只适用于 ref类型）  -->
	<bean id="course" class="cn.edu.xit.entity.Course" autowire="byName">
		<property name="courseName" value="java"></property>
		<property name="courseHour" value="12"></property>
		
	<!-- 三、 p命名空间注入 -->
	<!--<bean id="course" class="cn.edu.xit.entity.Course" p:courseName="web" p:courseHour="300" p:teacher-ref="teacher"> -->
		<!--  xx.setCourseName("java")  
		<property name="courseName" value="java"></property>
		<property name="courseHour" value="12"></property>
		  将teacher对象注入到course对象中
				xx.setTeacher(teacher);
		 	
		<property name="teacher" ref="teacher"></property>
		-->
		<!-- 
			<constructor-arg value="c语言" ></constructor-arg>
			<constructor-arg value="100" ></constructor-arg>
			<constructor-arg ref="teacher" ></constructor-arg>
		 -->
		 
		 
		 
	</bean>
	
	
	
	
	<!-- 配置前置通知 -->


	<!-- addStudent()所在方法
	<bean id="studentDao" class="cn.edu.xit.dao.impl.StudentDaoImpl"></bean>
	<bean id="studentService" class="cn.edu.xit.service.impl.StudentServiceImpl">
		<property name="studentDao" ref="studentDao"></property>
	</bean>
	 -->
	<!-- 前置通知类 -->
	<!-- =========连接线的切面========== -->
	<bean id="logBefore" class="cn.edu.xit.aop.LogBefore"></bean>

	<!-- 将addStudent()   和      通知   进行关联 -->
	<aop:config>
		<!-- 配置切入点  （在哪里执行通知） -->
		<!-- =========连接线的切面的切点========== -->
		<aop:pointcut expression="execution(public void cn.edu.xit.service.impl.StudentServiceImpl.deleteStudentByNo(int)) or execution(public void cn.edu.xit.service.impl.StudentServiceImpl.addStudent(cn.edu.xit.entity.Student))" id="poioncut"/>
		<!-- advisor:相当于                               链接切面                          和                            切入点                        的线 -->
		<!-- =========连接线========== -->
		<aop:advisor advice-ref="logBefore" pointcut-ref="poioncut"/>
	</aop:config>
	
	
	
	<!-- 后置通知类 -->
	<!-- 将通知纳入springIOC容器 -->
	<bean id="logAfter" class="cn.edu.xit.aop.LogAfter"></bean>

	<!-- 将addStudent()   和      通知   进行关联 -->
	<aop:config>
		<!-- 配置切入点  （连接线的一段：业务类的具体方法） -->
		<aop:pointcut expression="execution(public void cn.edu.xit.service.impl.StudentServiceImpl.addStudent(cn.edu.xit.entity.Student))" id="poioncut2"/>
		<!-- 连接线的另一端：通知类 -->
		<aop:advisor advice-ref="logAfter" pointcut-ref="poioncut2"/>
	</aop:config>
	
	
	<!--  异常通知类 -->
	<bean id="logException" class="cn.edu.xit.aop.LogException"></bean>
	<aop:config>
		<aop:pointcut expression="execution(public void cn.edu.xit.service.impl.StudentServiceImpl.addStudent(cn.edu.xit.entity.Student))" id="poioncut3"/>
		<aop:advisor advice-ref="logException" pointcut-ref="poioncut3"/>
	</aop:config>
	
	
	<!-- 环绕通知 -->
	<bean id="logAround" class="cn.edu.xit.aop.LogAround"></bean>
	<aop:config>
		<aop:pointcut expression="execution(public void cn.edu.xit.service.impl.StudentServiceImpl.addStudent(cn.edu.xit.entity.Student))" id="poioncut4"/>
		<aop:advisor advice-ref="logAround" pointcut-ref="poioncut4"/>
	</aop:config>
	
	
	
	<!-- 开启注解对AOP的支持 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- 扫描器 -->
	<context:component-scan base-package="cn.edu.xit.aop"></context:component-scan>
	
	
	
	
	
	
	
	<!-- 将准备转为通知的类纳入ioc容器 -->
	<bean id="logSchema" class="cn.edu.xit.aop.LogSchema"></bean>

	<!-- 将addStudent()   和      通知   进行关联 -->
	<aop:config>
		<!-- 配置切入点  （连接线的一段：业务类的具体方法） -->
		<aop:pointcut expression="execution(public * cn.edu.xit.service.impl.StudentServiceImpl.addStudent(cn.edu.xit.entity.Student))" id="pcShema"/>
		<!-- schame方式 -->
		<aop:aspect ref="logSchema">
			<!-- 连接线：连接业务 addStudent  和     通知before -->
			<aop:before method="before" pointcut-ref="pcShema"/>
			<!-- 连接线：连接业务 addStudent  和    通知afterReturning -->
			<aop:after-returning method="afterReturning" returning="returnValue" pointcut-ref="pcShema"/>
			<aop:after-throwing method="whenException" pointcut-ref="pcShema" throwing="e"/>
			<aop:around method="around" pointcut-ref="pcShema"/>
		</aop:aspect>
		
	</aop:config>
	
	
	
</beans>
